import sqlite3
import os
import csv

# --- –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∞—Ç –≤–∞—à–∏ .db —Ñ–∞–π–ª—ã
DIRECTORY_PATH = '.'  # '.' –æ–∑–Ω–∞—á–∞–µ—Ç '—Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞'

# –ò–º—è —Å—Ç–æ–ª–±—Ü–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
ELEMENT_ID_COLUMN = 'elemId'

# –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—Å–µ—Ç–æ–º)
SET_N_COLUMN = 'setN'

# –ò–º–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
OUTPUT_CSV_FILENAME = 'Enveloped_Reinforcement_Analysis.csv'
OUTPUT_DB_FILENAME = 'Enveloped_Reinforcement_Analysis.db'
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def process_db_files(directory):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ .db —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º—É–º–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É sqlite3.
    """
    max_reinforcement_data = {}
    db_files = [f for f in os.listdir(directory) if f.endswith('.db')]
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(db_files)} .db —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    for db_file in db_files:
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {db_file}")
        file_path = os.path.join(directory, db_file)
        try:
            con = sqlite3.connect(file_path)
            cursor = con.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –±–µ–∑ pandas
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]

            for table_name in tables:
                print(f"  - –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: '{table_name}'")
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f'SELECT * FROM "{table_name}"')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = [description[0] for description in cursor.description]
                col_to_idx = {name: i for i, name in enumerate(headers)}

                if ELEMENT_ID_COLUMN not in col_to_idx or SET_N_COLUMN not in col_to_idx:
                    print(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ '{ELEMENT_ID_COLUMN}' –∏–ª–∏ '{SET_N_COLUMN}'.")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª–±—Ü—ã —Å –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                reinf_cols_map = {name: i for name, i in col_to_idx.items() if name.startswith('As')}
                if not reinf_cols_map:
                    print(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º ('As...').")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                for row in cursor.fetchall():
                    element_id = row[col_to_idx[ELEMENT_ID_COLUMN]]
                    if element_id not in max_reinforcement_data:
                        max_reinforcement_data[element_id] = {}

                    for col_name, col_idx in reinf_cols_map.items():
                        current_value = row[col_idx]
                        
                        if col_name not in max_reinforcement_data[element_id] or current_value > max_reinforcement_data[element_id][col_name]['value']:
                            max_reinforcement_data[element_id][col_name] = {
                                'value': current_value,
                                'db': db_file,
                                'table': table_name,
                                'setN': row[col_to_idx[SET_N_COLUMN]]
                            }
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {db_file}: {e}")
        finally:
            if 'con' in locals():
                con.close()
                
    return max_reinforcement_data

def prepare_results_list(data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    results = []
    for element_id in sorted(data.keys()):
        for reinf_type, details in data[element_id].items():
            results.append([
                element_id,
                reinf_type,
                details['value'],
                details['db'],
                details['table'],
                details['setN']
            ])
    return results

def save_to_csv(results_list, header):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª."""
    with open(OUTPUT_CSV_FILENAME, 'w', newline='', encoding='cp1251') as f:
        writer = csv.writer(f, delimiter=';')
        writer.writerow(header)
        writer.writerows(results_list)
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª: {OUTPUT_CSV_FILENAME}")

def save_to_db(results_list, header):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π DB —Ñ–∞–π–ª."""
    con = sqlite3.connect(OUTPUT_DB_FILENAME)
    cur = con.cursor()
    
    table_name = "EnvelopedReinforcement"
    safe_header = [h.replace(' ', '_').replace(',', '') for h in header]
    columns_def = ", ".join([f'"{col}" TEXT' for col in safe_header])
    cur.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({columns_def})")

    placeholders = ", ".join(["?"] * len(header))
    cur.executemany(f"INSERT INTO {table_name} VALUES ({placeholders})", results_list)
    
    con.commit()
    con.close()
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ DB —Ñ–∞–π–ª: {OUTPUT_DB_FILENAME} (—Ç–∞–±–ª–∏—Ü–∞: {table_name})")


# --- –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---
if __name__ == "__main__":
    print("--- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ–≥–∏–±–∞—é—â–µ–π –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–µ—Ä—Å–∏—è –±–µ–∑ pandas) ---")
    
    final_data_dict = process_db_files(DIRECTORY_PATH)
    
    if not final_data_dict:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .db —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ.")
    else:
        header = ['Element_ID', 'Reinforcement_Type', 'Max_Value', 'Source_DB', 'Source_Table', 'Source_SetN']
        results = prepare_results_list(final_data_dict)
        
        save_to_csv(results, header)
        save_to_db(results, header)
        
        print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

