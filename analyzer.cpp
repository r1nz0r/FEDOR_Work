#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem> // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (C++17)
#include <fstream>    // –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–¥–æ–±–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è SQLite.
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.
#include "sqlite_modern_cpp.h"

namespace fs = std::filesystem;

// --- –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
const std::string ELEMENT_ID_COLUMN = "elemId";
const std::string SET_N_COLUMN = "setN";
const std::string OUTPUT_CSV_FILENAME = "Enveloped_Reinforcement_Analysis.csv";
const std::string OUTPUT_DB_FILENAME = "Enveloped_Reinforcement_Analysis.db";
// --------------------------

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
struct ResultInfo {
    double value = 0.0;
    std::string source_db;
    std::string source_table;
    long long source_setN = 0;
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: { elementId -> { reinfType -> ResultInfo } }
using MaxResultsMap = std::unordered_map<long long, std::unordered_map<std::string, ResultInfo>>;

void processDatabase(const fs::path& db_path, MaxResultsMap& results) {
    std::cout << "\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: " << db_path.filename().string() << std::endl;
    try {
        sqlite::database db(db_path.string());

        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        std::vector<std::string> table_names;
        db << "SELECT name FROM sqlite_master WHERE type='table';"
           >> [&](std::string name) {
               table_names.push_back(name);
           };

        for (const auto& table_name : table_names) {
            std::cout << "  - –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: '" << table_name << "'" << std::endl;
            
            // 2. –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            db << "SELECT * FROM \"" + table_name + "\";"
               >> [&](sqlite::query_result::row_type row) {
                   
                   // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ –∏–º–µ–Ω–∞–º —Å—Ç–æ–ª–±—Ü–æ–≤
                   try {
                       long long element_id = row.get<long long>(ELEMENT_ID_COLUMN);
                       long long set_n = row.get<long long>(SET_N_COLUMN);

                       // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º –≤ —Å—Ç—Ä–æ–∫–µ
                       for(const auto& field : row) {
                           std::string col_name = field.first;
                           if (col_name.rfind("As", 0) == 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ —Å "As"
                               double current_value = field.second.get<double>();

                               // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º
                               if (results[element_id].find(col_name) == results[element_id].end() || current_value > results[element_id][col_name].value) {
                                   results[element_id][col_name] = {current_value, db_path.filename().string(), table_name, set_n};
                               }
                           }
                       }
                   } catch (const std::exception& e) {
                       // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–ª–∏ —Ç–∏–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                   }
               };
        }
    } catch (const std::exception& e) {
        std::cerr << "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ " << db_path.string() << ": " << e.what() << std::endl;
    }
}

void saveResults(const MaxResultsMap& results) {
    std::cout << "\n‚úçÔ∏è –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..." << std::endl;
    
    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV ---
    std::ofstream csv_file(OUTPUT_CSV_FILENAME);
    // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel –Ω–∞ Windows
    // csv_file.imbue(std::locale("ru_RU.CP1251")); 
    csv_file << "Element_ID;Reinforcement_Type;Max_Value;Source_DB;Source_Table;Source_SetN\n";

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DB ---
    if (fs::exists(OUTPUT_DB_FILENAME)) {
        fs::remove(OUTPUT_DB_FILENAME);
    }
    sqlite::database db(OUTPUT_DB_FILENAME);
    db << "CREATE TABLE EnvelopedReinforcement (Element_ID INTEGER, Reinforcement_Type TEXT, Max_Value REAL, Source_DB TEXT, Source_Table TEXT, Source_SetN INTEGER);";
    auto transaction = db.transaction();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (—Å–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º)
    std::vector<long long> sorted_keys;
    for(const auto& pair : results) sorted_keys.push_back(pair.first);
    std::sort(sorted_keys.begin(), sorted_keys.end());

    for (const auto& element_id : sorted_keys) {
        const auto& reinf_map = results.at(element_id);
        for (const auto& pair : reinf_map) {
            const std::string& reinf_type = pair.first;
            const ResultInfo& info = pair.second;

            // –ó–∞–ø–∏—Å—å –≤ CSV
            csv_file << element_id << ";"
                     << reinf_type << ";"
                     << info.value << ";"
                     << info.source_db << ";"
                     << info.source_table << ";"
                     << info.source_setN << "\n";
            
            // –ó–∞–ø–∏—Å—å –≤ DB
            db << "INSERT INTO EnvelopedReinforcement VALUES (?, ?, ?, ?, ?, ?);"
               << element_id << reinf_type << info.value << info.source_db << info.source_table << info.source_setN;
        }
    }

    transaction.commit();
    csv_file.close();

    std::cout << "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ " << OUTPUT_CSV_FILENAME << " –∏ " << OUTPUT_DB_FILENAME << std::endl;
}

int main() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Windows
    #ifdef _WIN32
        std::system("chcp 65001 > nul");
    #endif
    
    std::cout << "--- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ–≥–∏–±–∞—é—â–µ–π –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (C++ –≤–µ—Ä—Å–∏—è) ---" << std::endl;
    
    MaxResultsMap all_max_results;
    const fs::path current_path(".");

    for (const auto& entry : fs::directory_iterator(current_path)) {
        if (entry.is_regular_file() && entry.path().extension() == ".db") {
            // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            if (entry.path().filename().string() != OUTPUT_DB_FILENAME) {
                processDatabase(entry.path(), all_max_results);
            }
        }
    }

    if (all_max_results.empty()) {
        std::cout << "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .db —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ." << std::endl;
    } else {
        saveResults(all_max_results);
    }

    std::cout << "\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!" << std::endl;
    return 0;
}

